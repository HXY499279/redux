{"ast":null,"code":"//引入Count的UI组件\nimport CountUI from '../../components/Count/index';\nimport { createIncrementAction } from \"../../\"; //引入connect用于连接UI组件与redux\n\nimport { connect } from 'react-redux'; //count函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——状态\n//因为count函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用count函数的时候会自己从store拿到状态并传递到count函数中\n\nfunction count(state) {\n  return {\n    n: state\n  };\n} //b函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——操作状态的方法\n\n\nfunction b(dispatch) {\n  return {\n    jia: number => {\n      //通知redux执行加法\n      dispatch({\n        type: 'increment',\n        data: number\n      });\n    }\n  };\n} //使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\n\n\nexport default connect(count, b)(CountUI);","map":{"version":3,"sources":["D:/code/reduxtest/src/containers/Count/index.jsx"],"names":["CountUI","createIncrementAction","connect","count","state","n","b","dispatch","jia","number","type","data"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,8BAApB;AACA,SAASC,qBAAT,QAAsC,QAAtC,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AACA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACnB,SAAO;AAACC,IAAAA,CAAC,EAACD;AAAH,GAAP;AACH,C,CACD;;;AACA,SAASE,CAAT,CAAYC,QAAZ,EAAsB;AAClB,SAAO;AAACC,IAAAA,GAAG,EAAEC,MAAD,IAAY;AACpB;AACAF,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAC,WAAN;AAAkBC,QAAAA,IAAI,EAACF;AAAvB,OAAD,CAAR;AACH;AAHM,GAAP;AAIH,C,CACD;;;AACA,eAAeP,OAAO,CAACC,KAAD,EAAOG,CAAP,CAAP,CAAiBN,OAAjB,CAAf","sourcesContent":["//引入Count的UI组件\r\nimport CountUI from '../../components/Count/index'\r\nimport { createIncrementAction } from \"../../\"\r\n\r\n//引入connect用于连接UI组件与redux\r\nimport { connect } from 'react-redux'\r\n\r\n//count函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——状态\r\n//因为count函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用count函数的时候会自己从store拿到状态并传递到count函数中\r\nfunction count (state) {\r\n    return {n:state}\r\n}\r\n//b函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——操作状态的方法\r\nfunction b (dispatch) {\r\n    return {jia:(number) => {\r\n        //通知redux执行加法\r\n        dispatch({type:'increment',data:number})\r\n    }}\r\n}\r\n//使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\r\nexport default connect(count,b)(CountUI)\r\n"]},"metadata":{},"sourceType":"module"}