{"ast":null,"code":"//引入Count的UI组件\nimport CountUI from '../../components/Count/index';\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from \"../../redux/count_action\"; //引入connect用于连接UI组件与redux\n\nimport { connect } from 'react-redux';\n/*\r\n    1.mapStateToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapStateToProps用于传递状态\r\n    4.因为mapStateToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapStateToProps函数的时候会自己从store拿到状态state并传递到mapStateToProps函数中\r\n*/\n\nfunction mapStateToProps(state) {\n  return {\n    count: state\n  };\n}\n/*\r\n    1.mapDispatchToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapDispatchToProps用于传递状态\r\n    4.因为mapDispatchToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapDispatchToProps函数的时候会自己从store拿到方法dispatch并传递到mapDispatchToProps函数中\r\n*/\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    //通知redux执行加法\n    jia: number => {\n      dispatch(createIncrementAction(number));\n    },\n    jian: number => {\n      dispatch(createDecrementAction(number));\n    },\n    asyncjia: number => {\n      dispatch(createIncrementAsyncAction(number, 500));\n    }\n  };\n} //使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountUI);","map":{"version":3,"sources":["D:/code/reduxtest/src/containers/Count/index.jsx"],"names":["CountUI","createIncrementAction","createDecrementAction","createIncrementAsyncAction","connect","mapStateToProps","state","count","mapDispatchToProps","dispatch","jia","number","jian","asyncjia"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,8BAApB;AACA,SAASC,qBAAT,EAAgCC,qBAAhC,EAAuDC,0BAAvD,QAAyF,0BAAzF,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AAAEC,IAAAA,KAAK,EAAED;AAAT,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACH;AACAC,IAAAA,GAAG,EAAGC,MAAD,IAAY;AAAEF,MAAAA,QAAQ,CAACR,qBAAqB,CAACU,MAAD,CAAtB,CAAR;AAAyC,KAFzD;AAGHC,IAAAA,IAAI,EAAGD,MAAD,IAAY;AAAEF,MAAAA,QAAQ,CAACP,qBAAqB,CAACS,MAAD,CAAtB,CAAR;AAAyC,KAH1D;AAIHE,IAAAA,QAAQ,EAAGF,MAAD,IAAY;AAAEF,MAAAA,QAAQ,CAACN,0BAA0B,CAACQ,MAAD,EAAQ,GAAR,CAA3B,CAAR;AAAkD;AAJvE,GAAP;AAMH,C,CACD;;;AACA,eAAeP,OAAO,CAACC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CR,OAA7C,CAAf","sourcesContent":["//引入Count的UI组件\r\nimport CountUI from '../../components/Count/index'\r\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from \"../../redux/count_action\"\r\n\r\n//引入connect用于连接UI组件与redux\r\nimport { connect } from 'react-redux'\r\n\r\n/*\r\n    1.mapStateToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapStateToProps用于传递状态\r\n    4.因为mapStateToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapStateToProps函数的时候会自己从store拿到状态state并传递到mapStateToProps函数中\r\n*/\r\nfunction mapStateToProps(state) {\r\n    return { count: state }\r\n}\r\n/*\r\n    1.mapDispatchToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapDispatchToProps用于传递状态\r\n    4.因为mapDispatchToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapDispatchToProps函数的时候会自己从store拿到方法dispatch并传递到mapDispatchToProps函数中\r\n*/\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        //通知redux执行加法\r\n        jia: (number) => { dispatch(createIncrementAction(number)) },\r\n        jian: (number) => { dispatch(createDecrementAction(number)) },\r\n        asyncjia: (number) => { dispatch(createIncrementAsyncAction(number,500)) }\r\n    }\r\n}\r\n//使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountUI)\r\n"]},"metadata":{},"sourceType":"module"}