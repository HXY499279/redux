{"ast":null,"code":"//引入Count的UI组件\nimport CountUI from '../../components/Count/index';\nimport { createIncrementAction } from \"../../redux/count_action\"; //引入connect用于连接UI组件与redux\n\nimport { connect } from 'react-redux';\n/*\r\n    1.mapStateToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapStateToProps用于传递状态\r\n    4.因为mapStateToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapStateToProps函数的时候会自己从store拿到状态并传递到mapStateToProps函数中\r\n*/\n//\n\nfunction mapStateToProps(state) {\n  return {\n    count: state\n  };\n} //mapDispatchToProps函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——操作状态的方法\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    jia: number => {\n      //通知redux执行加法\n      dispatch(createIncrementAction(number));\n    }\n  };\n} //使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountUI);","map":{"version":3,"sources":["D:/code/reduxtest/src/containers/Count/index.jsx"],"names":["CountUI","createIncrementAction","connect","mapStateToProps","state","count","mapDispatchToProps","dispatch","jia","number"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,8BAApB;AACA,SAASC,qBAAT,QAAsC,0BAAtC,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAO;AAACC,IAAAA,KAAK,EAACD;AAAP,GAAP;AACH,C,CACD;;;AACA,SAASE,kBAAT,CAA6BC,QAA7B,EAAuC;AACnC,SAAO;AAACC,IAAAA,GAAG,EAAEC,MAAD,IAAY;AACpB;AACAF,MAAAA,QAAQ,CAACN,qBAAqB,CAACQ,MAAD,CAAtB,CAAR;AACH;AAHM,GAAP;AAIH,C,CACD;;;AACA,eAAeP,OAAO,CAACC,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CN,OAA5C,CAAf","sourcesContent":["//引入Count的UI组件\r\nimport CountUI from '../../components/Count/index'\r\nimport { createIncrementAction } from \"../../redux/count_action\"\r\n\r\n//引入connect用于连接UI组件与redux\r\nimport { connect } from 'react-redux'\r\n\r\n/*\r\n    1.mapStateToProps函数返回的是一个对象\r\n    2.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value\r\n    3.mapStateToProps用于传递状态\r\n    4.因为mapStateToProps函数是react-redux的connect调用的，并且容器组件也收到了store，所以react-redux在调用mapStateToProps函数的时候会自己从store拿到状态并传递到mapStateToProps函数中\r\n*/\r\n//\r\nfunction mapStateToProps (state) {\r\n    return {count:state}\r\n}\r\n//mapDispatchToProps函数返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value——操作状态的方法\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {jia:(number) => {\r\n        //通知redux执行加法\r\n        dispatch(createIncrementAction(number))\r\n    }}\r\n}\r\n//使用connect()()创建并暴露一个Count的容器组件,connect函数需要传递两个参数，这两个参数的类型是函数，第一个参数是状态，第二个参数是操作状态的方法\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n"]},"metadata":{},"sourceType":"module"}